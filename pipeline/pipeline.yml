resources:
  # Sample Go app in a GitRepo
  - name: go_repo
    type: GitRepo
    configuration:
      path: lsilvapvt/redis-probe
      branches:
        include: master
      gitProvider: acme_co_github

  # Build info for the published Go app
  - name: go_buildinfo
    type: BuildInfo
    configuration:
      sourceArtifactory: acme_co_artifactory
  # Build info for the staging promoted Go app
  - name: go_stage_buildinfo
    type: BuildInfo
    configuration:
      sourceArtifactory: acme_co_artifactory
  # Build info for the published Go app
  - name: go_dockerbuildinfo
    type: BuildInfo
    configuration:
      sourceArtifactory: acme_co_swampup113
  # Build info for the production promoted Go app
  - name: go_prod_dockerbuildinfo
    type: BuildInfo
    configuration:
      sourceArtifactory: acme_co_swampup113

  - name: go_build_binary
    type: FileSpec
    configuration:
      sourceArtifactory: acme_co_artifactory
      pattern: "go-stage-local/redis-probe-files/*/redis-probe-linux"
      recursive: false
      flat: true
      buildName: go_redis_probe_build
      buildNumber: ${res_go_stage_buildinfo_buildNumber}


  - name: redis_probe_img
    type: Image
    configuration:
      registry: acme_co_swampup113                          
      sourceRepository: docker-stage-local   
      imageName: swampup113.jfrog.io/docker-stage-local/redis-probe
      imageTag: ${res_go_stage_buildinfo_buildNumber}
      autoPull: true

pipelines:
  - name: go_redis_probe_build
    configuration:
      runtime:
        type: image
        image:
          auto:
            language: go
            versions:
              - "1.14.4"      
    steps:
      - name: redis_probe
        type: GoBuild
        configuration:
          sourceLocation: ./src
          resolverRepo: go-virtual
          noRegistry: true
          inputResources:
            - name: go_repo
          integrations:
            - name: acme_co_artifactory

      # Publish the Go sample app binary to Artifactory. Docs at https://www.jfrog.com/confluence/display/JFROG/GoPublishBinary
      - name: publish_go_binary
        type: GoPublishBinary
        configuration:
          inputSteps:
            - name: redis_probe
          targetRepository: go-local/redis-probe-files/${run_number}/redis-probe-linux
          integrations:
            - name: acme_co_artifactory

      # Publish the Go sample app build info. Docs at https://www.jfrog.com/confluence/display/JFROG/PublishBuildInfo
      - name: publish_build
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: publish_go_binary
          outputResources:
            - name: go_buildinfo

      - name: func_test_Ubuntu
        type: Bash
        configuration:
          nodePool: default-dynamic-nodepool
          integrations:
            - name: acme_co_artifactory
            - name: acme_co_redis_test
          inputResources:
            - name: go_buildinfo
          inputSteps:
            - name: publish_build
        execution:
          onStart:
            - echo "Your pre-test1 scripts are invoked here"
            - jfrog rt dl go-local/redis-probe-files/${res_go_buildinfo_buildNumber}/redis-probe-linux --flat
            - chmod 755 ./redis-probe-linux
            - ls -latr
          onExecute:
            - echo "Build name= ${res_go_buildinfo_buildName}"
            - echo "Build number= ${res_go_buildinfo_buildNumber}"
            - lsb_release -a
            - ls -latr
            - export REDIS_PROBE_SERVICE_PORT="8888"
            - env
            - ./redis-probe-linux &
            - curl localhost:8888 
            - curl localhost:8888/ping 

      - name: func_test_CentOS
        type: Bash
        configuration:
          nodePool: centos8
          integrations:
            - name: acme_co_artifactory
            - name: acme_co_redis_test
          inputResources:
            - name: go_buildinfo
          inputSteps:
            - name: publish_build
        execution:
          onStart:
            - echo "Your pre-test1 scripts are invoked here"
            - jfrog rt dl go-local/redis-probe-files/${res_go_buildinfo_buildNumber}/redis-probe-linux --flat
            - chmod 755 ./redis-probe-linux
            - ls -latr
          onExecute:
            - echo "Build name= ${res_go_buildinfo_buildName}"
            - echo "Build number= ${res_go_buildinfo_buildNumber}"
            - cat /etc/centos-release 
            - ls -latr
            - export REDIS_PROBE_SERVICE_PORT="8888"
            - env
            - ./redis-probe-linux &
            - curl localhost:8888 
            - curl localhost:8888/ping 

      - name: security_scan
        type: XrayScan
        configuration:
          inputResources:
            - name: go_buildinfo 
          inputSteps:
            - name: func_test_Ubuntu
            - name: func_test_CentOS

      - name: parameters_tests
        type: Matrix
        stepMode: Bash
        configuration:
          integrations:
            - name: acme_co_artifactory
          inputResources:
            - name: go_buildinfo
          inputSteps:
            - name: security_scan 

        stepletMultipliers:
          environmentVariables:                    # Sets of environment variables for steplets
            - subCommand: ping                     # - Set 1
            - subCommand: set                      # - Set 2
      
        execution:
          onStart:
            - echo "Your pre-test1 scripts are invoked here"
            - jfrog rt dl go-local/redis-probe-files/${res_go_buildinfo_buildNumber}/redis-probe-linux --flat
            - chmod 755 ./redis-probe-linux
            - ls -latr
          onExecute:
          - echo "I am executing matrix steplet ${steplet_id}"
          - echo "Environments subCommand [${subCommand}], REDIS_SERVER_ADDRESS [${REDIS_SERVER_ADDRESS}]"
          - echo "Runtime image name $step_image_name , Runtime image name ${step_image_tag}"
          - echo "Build name= ${res_go_stage_buildinfo_buildName}"
          - echo "Build number= ${res_go_stage_buildinfo_buildNumber}"
          - echo "Your integration test scripts are invoked here."

      - name: promote_stage
        type: PromoteBuild
        configuration:
          targetRepository: go-stage-local
          includeDependencies: false
          copy: true
          integrations:
            - name: acme_co_artifactory
          inputResources:
            - name: go_buildinfo
          outputResources:
            - name: go_stage_buildinfo
          inputSteps:
            - name: parameters_tests  



  - name: go_redis_probe_docker_build
    steps:
      - name: pre_checks
        type: Bash
        configuration:
          integrations:
            - name: acme_co_artifactory
          inputResources:
            - name: go_stage_buildinfo
            - name: go_buildinfo
            - name: go_build_binary
        execution:
          onExecute:
            - echo "go_buildinfo name= ${res_go_buildinfo_buildName}"
            - echo "go_buildinfo number= ${res_go_buildinfo_buildNumber}"
            - echo "go_stage_buildinfo name= ${res_go_stage_buildinfo_buildName}"
            - echo "go_stage_buildinfo number= ${res_go_stage_buildinfo_buildNumber}"
            - ls -la

      - name: build_image
        type: DockerBuild
        configuration:
          affinityGroup: docker_group
          dockerFileLocation: ./docker/
          dockerFileName: Dockerfile
          dockerImageName: swampup113.jfrog.io/docker-stage-local/redis-probe 
          dockerImageTag: ${res_go_stage_buildinfo_buildNumber}
          inputResources:
            - name: go_stage_buildinfo
            - name: go_buildinfo
            - name: go_repo
            - name: go_build_binary
          inputSteps:
            - name: pre_checks
          integrations:
            - name: acme_co_artifactory

      - name: publish_dockerbuild
        type: DockerPush
        configuration:
          targetRepository: docker-stage-local
          affinityGroup: docker_group
          autoPublishBuildInfo: true   
          forceXrayScan: false
          failOnScan: false
          integrations:
            - name: acme_co_swampup113
          inputSteps:
            - name: build_image
          outputResources:
            - name: redis_probe_img
            - name: go_dockerbuildinfo

      - name: test_docker_image
        type: Bash
        configuration:
          integrations:
            - name: acme_co_artifactory
            - name: acme_co_swampup113
            - name: acme_co_aks
            - name: acme_co_redis_test
          inputResources:
            - name: redis_probe_img
            - name: go_dockerbuildinfo
            - name: go_repo
          inputSteps:
            - name: publish_dockerbuild
        execution:
          onStart:
            - echo "Your pre-test1 scripts are invoked here"
            - curl -o ytt https://github.com/vmware-tanzu/carvel-ytt/releases/download/v0.36.0/ytt-linux-amd64
            - chmod 755 ./ytt
          onExecute:
            - echo "Docker Build name= ${res_go_dockerbuildinfo_buildName}"
            - echo "Docker Build number= ${res_go_dockerbuildinfo_buildNumber}"
            - echo "Your docker image test scripts are invoked here."
            - env
            - ls -la
            - kubectl config view
            - kubectl get ns
            - echo $res_go_repo_resourcePath
            - find ${res_go_repo_resourcePath}/.

      - name: promotion_approval
        type: Bash
        configuration:
          requiresApproval:
            timeoutSeconds: 43200
            approvers:
              - lucianos
            # notifications:
            #   - integrationName: SMTP_Integration #requires SMTP integration
            #     recipients:
            #       - email@example.com
            #   - integrationName: Slack_Integration #required Slack integration          
          inputSteps:
            - name: test_docker_image            
          inputResources:
            - name: go_dockerbuildinfo
          integrations:
            - name: acme_co_swampup113
        execution:
          onExecute:
            - echo "executing step..."

      - name: promote_docker_prod
        type: PromoteBuild
        configuration:
          targetRepository: docker-prod-local
          includeDependencies: false
          copy: true
          integrations:
            - name: acme_co_swampup113
          inputSteps:
            - name: promotion_approval            
          inputResources:
            - name: go_dockerbuildinfo
          outputResources:
            - name: go_prod_dockerbuildinfo
